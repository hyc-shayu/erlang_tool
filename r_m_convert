%%%-------------------------------------------------------------------
%%% @author shayu
%%% @copyright (C) 2019, <COMPANY>
%%% @doc
%%%
%%% record map 相互非嵌套转换
%%% 嵌套record map 相互转换解决方案
%%%
%%% @end
%%% Created : 15. 10月 2019 16:08
%%%-------------------------------------------------------------------
-module(r_m_convert).

-export([record_to_map/1, map_to_record/1, test/0]).

-record(foo, {id, name, other}).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 
%%  record map 相互非嵌套转换 嵌套时只会转换最外一层
%%  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-define(RECORD_2_MAP(RecordName, Record),
    begin
        [RecordName | _Rest] = tuple_to_list(Record),
        maps:from_list(lists:zip(record_info(fields, RecordName), _Rest))
    end
).
-define(MAP_2_RECORD(Map, RecordName), 
	list_to_tuple([RecordName | [maps:get(_Key, Map, undefined) || _Key <- record_info(fields, RecordName)]]) 
).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 
%%  record是在编译前进行预处理转换成tuple，运行时并没有record的概念
%%  因此record_info()无法使用变量参数在运行时获取字段
%%
%%  可以采用map的方式来维护record名字到record字段的映射，在处理嵌套结构时动态获取
%%  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 统一map存储record名字的key
-define(RECORD_NAME, '__record_name').

-define(RECORD_FIELDS_MAP,
    #{
        foo => ?FOO_FIELDS
    }
).

-define(FOO_FIELDS, record_info(fields, foo)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 
%%  嵌套record转换成嵌套map
%%  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
record_to_map(Record) ->
    case my_is_record(Record) of
        true ->
            record_to_map_1(Record);
        false ->
            erlang:error(badarg, [Record])
    end.

record_to_map_1(Record) ->
    RecordName = element(1, Record),
    %                          key列表                                                     value列表
	maps:from_list(lists:zip([?RECORD_NAME | maps:get(RecordName, ?RECORD_FIELDS_MAP)], r2m_get_val_list(Record, size(Record), []))).

r2m_get_val_list(_Record, 0, Ret) -> Ret;
r2m_get_val_list(Record, Index, Ret) ->
    Term = erlang:element(Index, Record),
    Val =
	case my_is_record(Term) of
        true ->
			record_to_map_1(Term);
        false ->
            Term
    end,
    r2m_get_val_list(Record, Index-1, [Val | Ret]).
    
my_is_record(Record) when is_tuple(Record) ->
    RecordName = element(1, Record),
    is_record(Record, RecordName, size(Record));
my_is_record(_) -> false.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 
%%  嵌套map转换成嵌套record
%%  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
map_to_record(Map) ->
    case my_is_map(Map) of
        true ->
            map_to_record_1(Map);
        false ->
            erlang:error(badarg, [Map])
    end.

map_to_record_1(Map = #{?RECORD_NAME := RecordName}) ->
    list_to_tuple(m2r_get_val_list(Map, [?RECORD_NAME | maps:get(RecordName, ?RECORD_FIELDS_MAP)], [])).

m2r_get_val_list(_Map, [], Ret) -> lists:reverse(Ret);
m2r_get_val_list(Map, [Field|FT], Ret) ->
    Term = maps:get(Field, Map, undefined),
    Val = 
    case my_is_map(Term) of
        true ->
            map_to_record_1(Term);
        false ->
            Term
    end,
    m2r_get_val_list(Map, FT, [Val|Ret]).

my_is_map(#{?RECORD_NAME := _RecordName}) ->
    true;
my_is_map(_) -> false.


%% test
test() ->
    R = #foo{id = 1, name = haha, other = #foo{id = 2, name = hehe}},
    M = record_to_map(R),
    test1(R, M),
    io:format("~w~nrecord_to_map~n~w~n", [R, M]),
    io:format("=====================================================================~n"),
    R1 = map_to_record(M),
    io:format("~w~nmap_to_record~n~w~n", [M, R1]).

test1(R, M) ->
    M1 = ?RECORD_2_MAP(foo, R),
    io:format("~w~n?RECORD_2_MAP~n~w~n", [R, M1]),
    io:format("=====================================================================~n"),
    R1 = ?MAP_2_RECORD(M, foo),
    io:format("~w~n?MAP_2_RECORD~n~w~n~n~n", [M, R1]).
